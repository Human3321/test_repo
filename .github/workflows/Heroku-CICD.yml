name: Heroku-CICD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Heroku Action
      # You may pin to the exact commit or the version.
      # uses: CDNievas/heroku-action@c9cf9c85571e67583e44ec92c0d1113f66b0e838
      uses: CDNievas/heroku-action@v1.0
       with:
         # Used for authentication. You can find it in your heroku homepage account settings
        heroku_api_key: 
         # Email from Heroku Account  
         heroku_email: 
        # The appname to use for deploying/updating
        heroku_app_name: 
         # The branch that you would like to deploy to Heroku
        branch: # optional, default is HEAD
         # Set this to true if want to use --force
        useforce: # optional
         # Set if your app is located in a subdirectory.
        appdir: # optional, default is 
         # Contents of the Procfile to save and deploy
        procfile: # optional, default is 
         # Set to true if you need upload files generated dynamically by the GitHub Action to Heroku
         dynamicFiles: # optional  
          # Buildpacks to install on Heroku
         buildpacks: # optional, default is 
          # Path to an localized env file
         env_file: # optional, default is 

    - name: Deploy to Heroku
      # You may pin to the exact commit or the version.
      # uses: AkhileshNS/heroku-deploy@79ef2ae4ff9b897010907016b268fd0f88561820
      uses: AkhileshNS/heroku-deploy@v3.12.12
      with:
        # This will be used for authentication. You can find it in your heroku homepage account settings
        heroku_api_key: 
        # Email that you use with heroku
        heroku_email: 
        # The appname to use for deploying/updating
        heroku_app_name: 
        # An optional buildpack to use when creating the heroku application
       buildpack: # optional
         # The branch that you would like to deploy to Heroku
        branch: # optional, default is HEAD
        # Set this to true if you don't want to use --force when switching branches
        dontuseforce: # optional, default is false
        # Set this to true if you don't want to automatically create the Heroku app
        dontautocreate: # optional, default is false
        # Will deploy using Dockerfile in project root.
        usedocker: # optional, default is false
        # Type of heroku process (web, worker, etc). This option only makes sense when usedocker enabled
        docker_heroku_process_type: # optional, default is web
        # A list of args to pass into the Docker build. This option only makes sense when usedocker enabled
        docker_build_args: # optional
        # Set if your app is located in a subdirectory.
        appdir: # optional, default is 
        # A URL to which a healthcheck is performed (checks for 200 request)
        healthcheck: # optional, default is 
        # Value to check for when conducting healthcheck request
        checkstring: # optional, default is 
        # Time (in seconds) to wait before performing healthcheck
        delay: # optional, default is 0
        # Contents of the Procfile to save and deploy
        procfile: # optional, default is 
        # When set to true this will attempt to rollback to the previous release if the healthcheck fails
        rollbackonhealthcheckfailed: # optional, default is false
        # Path to an localized env file
        env_file: # optional, default is 
        # Set to true if you want the action to just login to Heroku and nothing else
        justlogin: # optional, default is false
        # The region in which you would like to deploy a server
        region: # optional, default is 
        # Set stack of your heroku app if you need to change.Default : heroku-20
        stack: # optional, default is 
        # If deploying to an organization, then specify the name of the team or organization here
        team: # optional, default is 

- name: Setup Node.js environment
  uses: actions/setup-node@v3.5.1
  with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions.  Since there's a default, this is typically not supplied by the user.
    token: # optional, default is ${{ github.token }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
    
    - name: Upload a Build Artifact
  uses: actions/upload-artifact@v3.1.1
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
- name: Upload a Build Artifact
  uses: actions/upload-artifact@v3.1.1
  with:
    # Artifact name
    name: # optional, default is artifact
    # A file, directory or wildcard pattern that describes what to upload
    path: 
    # The desired behavior if no files are found using the provided path.
Available Options:
  warn: Output a warning but do not fail the action
  error: Fail the action with an error message
  ignore: Do not output any warnings or errors, the action does not fail

    if-no-files-found: # optional, default is warn
    # Duration after which artifact will expire in days. 0 means using default retention.
Minimum 1 day. Maximum 90 days unless changed from the repository settings page.

    retention-days: # optional
    - name: Deploy Docker to AWS (EC2)
  # You may pin to the exact commit or the version.
  # uses: bitovi/github-actions-deploy-docker-to-ec2@5e765996b6009f1de03c1f7e412592d2dede0a0b
  uses: bitovi/github-actions-deploy-docker-to-ec2@v0.3.0
  with:
    # Specifies if this action should checkout the code
    checkout: # optional, default is true
    # AWS access key ID
    aws_access_key_id: 
    # AWS secret access key
    aws_secret_access_key: 
    # AWS session token
    aws_session_token: # optional
    # AWS default region
    aws_default_region: # default is us-east-1
    # AWS S3 bucket to use for Terraform state. Defaults to `${org}-${repo}-{branch}-tf-state`
    tf_state_bucket: # optional
    # `.env` file to be used with the app
    dot_env: # optional
    # Port to expose for the app
    app_port: # optional, default is 80
    # The AWS IAM instance profile to use for the EC2 instance
    ec2_instance_profile: # optional
    # Set to "true" to Destroy the stack
    stack_destroy: # optional
    # Set to override the AWS resource identifier for the deployment.  Defaults to `${org}-{repo}-{branch}`.  Use with destroy to destroy specific resources.
    aws_resource_identifier: # optional
    # Define the root domain name for the application. e.g. app.com
    domain_name: 
    # Define the sub-domain part of the URL. Defaults to `${org}-${repo}-{branch}`
    sub_domain: # optional
    # Relative path for the directory of the app (i.e. where `Dockerfile` and `docker-compose.yaml` files are located). This is the directory that is copied to the EC2 instance.  Default is the root of the repo.
    app_directory: # optional
    - name: AWS Secrets Manager GitHub Action
  # You may pin to the exact commit or the version.
  # uses: aws-actions/aws-secretsmanager-get-secrets@287592d14d9c9c48199db83dc182ae12af3df18e
  uses: aws-actions/aws-secretsmanager-get-secrets@v1
  with:
    # One or more secret names, secret ARNs, or secret prefixes to retrieve
    secret-ids: 
    # (Optional) If true, JSON secrets will be deserialized, creating a secret environment variable for each key-value pair.
    parse-json-secrets: # optional, default is false
    - name: CodeGuru Reviewer
  # You may pin to the exact commit or the version.
  # uses: aws-actions/codeguru-reviewer@e96af14e3ba9bac3cca62a524bd5a8345038c684
  uses: aws-actions/codeguru-reviewer@v1.1
  with:
    # Repository name
    name: # optional, default is ${{ github.repository }}
    # Path to Java source repository
    source_path: # optional, default is .
    # Path to build artifact(s) - jar or class files in this directory will be uploaded for review
    build_path: # optional
    # SHA of next commit to be committed to source code repository after an event
    destination_commit: # optional, default is ${{ github.event.before || github.event.pull_request.base.sha }}
    # SHA of previous commit in the source code repository existed before an event
    source_commit: # optional, default is ${{ github.event.after || github.event.pull_request.head.sha }}
    # SHA of a commit thats the merge base for before and after commits in a pull or merge request
    merge_base_commit: # optional, default is ${{ github.event.pull_request.merge_commit_sha }}
    # Source branch of the event
    source_branch: # optional, default is ${{ github.head_ref || github.ref}}
    # Destination branch of the event
    destination_branch: # optional, default is ${{ github.base_ref || github.ref }}
    # AWS KMS Key ID to use for encrypting source code/build artifacts. By default, Amazon-owned encryption key is used. Supplying this value overrides it to use Customer-owned encryption key
    kms_key_id: # optional
    # Author/Actor who triggered an event in the source code repository
    author: # optional, default is ${{ github.event.actor }}
    # An identifier for the event that triggered CodeGuru Reviewer Analysis, e.g. Pull or Merge request id
    event_id: # optional, default is ${{ github.event.number || github.run_number }}
    # Name of the event that triggered the CI/CD workflow [supported Events: push, pull, merge_request_event, schedule, workflow_dispatch]
    event_name: # optional, default is ${{ github.event_name }}
    # State of the event that triggered the CI/CD workflow [example: pull_request: "opened"]
    event_state: # optional, default is ${{ github.event.action }}
    # Unique identifier referring to a specific client version
    client_id: # optional, default is GithubActions@v1
    # S3 Bucket which will be used for code reviews
    s3_bucket: 
    # Vendor Name(e.g. GITHUB, GITLAB) for CI/CD.
    vendor_name: # optional, default is GITHUB
    # Expected format for the results (e.g SARIF, SAST, JENKINS)
    output_format: # optional, default is SARIF
    - name: CodeGuru Reviewer
  # You may pin to the exact commit or the version.
  # uses: aws-actions/codeguru-reviewer@e96af14e3ba9bac3cca62a524bd5a8345038c684
  uses: aws-actions/codeguru-reviewer@v1.1
  with:
    # Repository name
    name: # optional, default is ${{ github.repository }}
    # Path to Java source repository
    source_path: # optional, default is .
    # Path to build artifact(s) - jar or class files in this directory will be uploaded for review
    build_path: # optional
    # SHA of next commit to be committed to source code repository after an event
    destination_commit: # optional, default is ${{ github.event.before || github.event.pull_request.base.sha }}
    # SHA of previous commit in the source code repository existed before an event
    source_commit: # optional, default is ${{ github.event.after || github.event.pull_request.head.sha }}
    # SHA of a commit thats the merge base for before and after commits in a pull or merge request
    merge_base_commit: # optional, default is ${{ github.event.pull_request.merge_commit_sha }}
    # Source branch of the event
    source_branch: # optional, default is ${{ github.head_ref || github.ref}}
    # Destination branch of the event
    destination_branch: # optional, default is ${{ github.base_ref || github.ref }}
    # AWS KMS Key ID to use for encrypting source code/build artifacts. By default, Amazon-owned encryption key is used. Supplying this value overrides it to use Customer-owned encryption key
    kms_key_id: # optional
    # Author/Actor who triggered an event in the source code repository
    author: # optional, default is ${{ github.event.actor }}
    # An identifier for the event that triggered CodeGuru Reviewer Analysis, e.g. Pull or Merge request id
    event_id: # optional, default is ${{ github.event.number || github.run_number }}
    # Name of the event that triggered the CI/CD workflow [supported Events: push, pull, merge_request_event, schedule, workflow_dispatch]
    event_name: # optional, default is ${{ github.event_name }}
    # State of the event that triggered the CI/CD workflow [example: pull_request: "opened"]
    event_state: # optional, default is ${{ github.event.action }}
    # Unique identifier referring to a specific client version
    client_id: # optional, default is GithubActions@v1
    # S3 Bucket which will be used for code reviews
    s3_bucket: 
    # Vendor Name(e.g. GITHUB, GITLAB) for CI/CD.
    vendor_name: # optional, default is GITHUB
    # Expected format for the results (e.g SARIF, SAST, JENKINS)
    output_format: # optional, default is SARIF
    - name: AWS Secrets Manager GitHub Action
  # You may pin to the exact commit or the version.
  # uses: aws-actions/aws-secretsmanager-get-secrets@287592d14d9c9c48199db83dc182ae12af3df18e
  uses: aws-actions/aws-secretsmanager-get-secrets@v1
  with:
    # One or more secret names, secret ARNs, or secret prefixes to retrieve
    secret-ids: 
    # (Optional) If true, JSON secrets will be deserialized, creating a secret environment variable for each key-value pair.
    parse-json-secrets: # optional, default is false
    - name: AWS Secrets Manager GitHub Action
  # You may pin to the exact commit or the version.
  # uses: aws-actions/aws-secretsmanager-get-secrets@287592d14d9c9c48199db83dc182ae12af3df18e
  uses: aws-actions/aws-secretsmanager-get-secrets@v1
  with:
    # One or more secret names, secret ARNs, or secret prefixes to retrieve
    secret-ids: 
    # (Optional) If true, JSON secrets will be deserialized, creating a secret environment variable for each key-value pair.
    parse-json-secrets: # optional, default is false- name: Amazon ECS "Render Task Definition" Action for GitHub Actions
  # You may pin to the exact commit or the version.
  # uses: aws-actions/amazon-ecs-render-task-definition@f15ed65f9cc12455139db0f8e8ff6f6aaad6dfda
  uses: aws-actions/amazon-ecs-render-task-definition@v1
  with:
    # The path to the ECS task definition JSON file
    task-definition: 
    # The name of the container defined in the containerDefinitions section of the ECS task definition
    container-name: 
    # The URI of the container image to insert into the ECS task definition
    image: 
    # Variables to add to the container. Each variable is of the form KEY=value, you can specify multiple variables with multi-line YAML strings.
    environment-variables: # optional
  
